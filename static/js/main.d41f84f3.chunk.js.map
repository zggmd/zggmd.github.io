{"version":3,"sources":["App.module.scss","components/Message/index.tsx","utils/helper.ts","App.tsx","serviceWorkerRegistration.ts","index.tsx","components/Message/index.module.scss"],"names":["module","exports","wrap","encode","msg","key","AES","encrypt","toString","decode","ciphertext","decrypt","encUtf8","copyToClipboard","text","document","queryCommandSupported","textarea","createElement","textContent","style","position","body","appendChild","select","execCommand","ex","console","warn","removeChild","Message","props","rootDom","parentDom","content","unmount","React","useMemo","useEffect","setTimeout","className","styles","message","divs","ReactDom","render","createMessage","copyFunc","data","App","useState","setText","setKey","resMsg","setResMsg","textChange","useCallback","e","target","value","keyChange","btnClick","isEncode","res","title","rows","autoFocus","placeholder","onChange","btns","onClick","bind","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d41f84f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"title\":\"App_title__2oBiX\",\"textarea\":\"App_textarea__2gxwZ\",\"key\":\"App_key__17kiG\",\"btns\":\"App_btns__15KWL\",\"encode\":\"App_encode__2EqD8\",\"res\":\"App_res__1nqeL\"};","import React from 'react'\nimport ReactDom from 'react-dom'\nimport styles from './index.module.scss'\n\nlet wrap: HTMLElement\nexport const createMessage = () => (content: React.ReactNode) => {\n  if (typeof document === \"undefined\") {\n    return;\n  }\n  if (!wrap) {\n    //如果有的话，说明已经调用过这个函数了，这个空div就可以一直复用\n    wrap = document.createElement(\"div\");\n    document.body && document.body.appendChild(wrap); //挂body上\n  }\n  const divs = document.createElement('div');\n  wrap.appendChild(divs);\n  ReactDom.render(<Message rootDom={wrap} parentDom={divs} content={content} />, divs)\n}\n\nexport type MessageProps = {\n  rootDom: HTMLElement; //这个用来干掉parentDom 这个可以常驻\n  parentDom: Element | DocumentFragment; //这个是挂载点 要unmount卸载 完毕后卸载挂载点 注意！一共2步卸载，别漏了\n  content: React.ReactNode;\n};\n\nexport function Message(props: MessageProps) {\n  const { rootDom, parentDom, content } = props;\n\n  const unmount = React.useMemo(() => () => {\n    if (parentDom && rootDom) {\n      rootDom.removeChild(parentDom);\n    }\n  }, [parentDom, rootDom]);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      unmount();\n    }, 2000);\n  }, [unmount]);\n  return <div className={styles.Message}>\n    <div className={styles.msg}>\n      {content}\n    </div>\n  </div>;\n}","import AES from 'crypto-js/aes';\nimport encUtf8 from 'crypto-js/enc-utf8';\n\nexport const encode = (msg: string, key: string): string => AES.encrypt(msg, key).toString();\n\nexport const decode = (ciphertext: string, key: string): string => AES.decrypt(ciphertext, key).toString(encUtf8)\n\n// Copies a string to the clipboard. Must be called from within an\n// event handler such as click. May return false if it failed, but\n// this is not always possible. Browser support for Chrome 43+,\n// Firefox 42+, Safari 10+, Edge and Internet Explorer 10+.\n// Internet Explorer: The clipboard feature may be disabled by\n// an administrator. By default a prompt is shown the first\n// time the clipboard is used (per session).\nexport const copyToClipboard = (text: string) => {\n    if (document.queryCommandSupported && document.queryCommandSupported(\"copy\")) {\n        const textarea = document.createElement(\"textarea\");\n        textarea.textContent = text;\n        textarea.style.position = \"fixed\";  // Prevent scrolling to bottom of page in Microsoft Edge.\n        document.body.appendChild(textarea);\n        textarea.select();\n        try {\n            return document.execCommand(\"copy\");  // Security exception may be thrown by some browsers.\n        }\n        catch (ex) {\n            console.warn(\"Copy to clipboard failed.\", ex);\n            return false;\n        }\n        finally {\n            document.body.removeChild(textarea);\n        }\n    }\n}\n","import React from 'react';\nimport styles from './App.module.scss';\nimport {encode, decode, copyToClipboard} from \"./utils/helper\";\nimport {createMessage} from \"./components/Message\";\n\nconst message = (msg: string) => createMessage()(msg)\n\n// copyFunc\nconst copyFunc = (data = '') => {\n  if (!data) return message('啥都没有复制个啥❓')\n  copyToClipboard(data)\n  message('复制成功啦✅')\n}\n\nfunction App() {\n  const [text, setText] = React.useState('')\n  const [key, setKey] = React.useState('')\n  const [resMsg, setResMsg] = React.useState('')\n  // textChange\n  const textChange = React.useCallback(e => {\n    setText(e.target.value)\n  }, [setText])\n  // keyChange\n  const keyChange = React.useCallback(e => {\n    setKey(e.target.value)\n  }, [setKey])\n  // btnClick\n  const btnClick = React.useCallback(isEncode => {\n    if (!text) return message('原文为空哦')\n    if (!key) return message('key为空哦')\n    const func = isEncode ? encode : decode\n    const res = func(text, key)\n    setResMsg(res)\n    if (!res) return message('好像不对❌，是不是加密/解密点错了')\n    if (res) {\n      copyFunc(res)\n    }\n  }, [text, key, setResMsg])\n  //\n\n  return (\n    <div className={styles.App}>\n      <div className={styles.title}>对称加密</div>\n      <textarea rows={8} className={styles.textarea} autoFocus placeholder=\"原文\" value={text} onChange={textChange}/>\n      <input className={styles.key} value={key} placeholder=\"key\" onChange={keyChange}/>\n      <div className={styles.btns}>\n        <button className={styles.encode} onClick={btnClick.bind('', true)}>加密🔒 & 复制📋</button>\n        <button className={styles.encode} onClick={btnClick.bind('', false)}>解密🔐 & 复制📋</button>\n      </div>\n      {\n        resMsg && <>\n          <div>转换结果：<button onClick={copyFunc.bind('', resMsg)}>复制</button></div>\n          <div className={styles.res}>{resMsg}</div>\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__3nst4\",\"msg\":\"Message_msg__2nKY9\"};"],"sourceRoot":""}